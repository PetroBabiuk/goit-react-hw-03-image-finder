{"version":3,"sources":["components/Searchbar/Searchbar.js","components/Button/Button.js","components/ImageGalleryItem/ImageGalleryItem.js","servises/picturesApi.js","components/ImageGallery/ImageGallery.js","App.js","index.js"],"names":["Searchbar","state","inputValue","handleInputChange","e","setState","currentTarget","value","handleSubmit","preventDefault","trim","toast","error","props","onSubmit","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","Button","onClick","ImageGalleryItem","id","webformatURL","src","alt","fetchPicture","query","page","a","fetch","response","ok","json","Promise","reject","Error","ImageGallery","images","pages","status","autoScroll","window","scrollTo","top","document","documentElement","scrollHeight","behavior","handleLoadMore","prevState","prevProps","prevQuery","prevPage","nextQuery","nextPage","picturesApi","then","totalHits","console","log","hits","catch","color","height","width","map","image","message","App","getQuery","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.824d88a4.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { toast } from 'react-toastify';\n\nclass Searchbar extends Component {\n    state = {\n        inputValue: '',\n    };\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.currentTarget.value });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n\n        if (this.state.inputValue.trim() === '') {\n          return toast.error('Please do not use empty string, you have to write something');\n        }\n\n        this.props.onSubmit(this.state.inputValue);\n        this.setState({ inputValue: '' });\n    };\n\n    \n    render() {\n        return (\n            <header className=\"Searchbar\">\n                <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n                    <button type=\"submit\" className=\"SearchForm-button\">\n                        <span className=\"SearchForm-button-label\">Search</span>\n                    </button>\n\n                    <input\n                        className=\"SearchForm-input\"\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search images and photos\"\n                        value={this.state.inputValue}\n                        onChange={this.handleInputChange}\n                        />\n                </form>\n            </header>\n        );\n    };\n};\n\nexport default Searchbar;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick }) => (\n    <button className=\"Button\" onClick={onClick}>Load more</button>\n);\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;","import PropTypes from 'prop-types';\n\nconst ImageGalleryItem = ({ id, webformatURL }) => (\n    <li className=\"ImageGalleryItem\">\n        <img src={webformatURL} alt={id} className=\"ImageGalleryItem-image\" />\n    </li>\n);\n\nImageGalleryItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    webformatURL: PropTypes.string.isRequired,\n};\n\nexport default ImageGalleryItem;","export default async function fetchPicture (query, page) {\n    const response = await fetch(`https://pixabay.com/api/?q=${query}&page=${page}&key=22394687-5b263f11c9e1c3bf9700990e1&image_type=photo&orientation=horizontal&per_page=12`);\n    if (response.ok) {\n        return response.json();\n    }\n    return await Promise.reject(new Error(`Sorry, but something was wrong,`));\n}","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from \"react-loader-spinner\";\nimport Button from 'components/Button';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport picturesApi from '../../servises/picturesApi';\n\nclass ImageGallery extends Component {\n\n    state = {\n        images: [],\n        error: null,\n        pages: 0,\n        page: 1,\n        status: 'idle',\n    };\n\n    async componentDidUpdate(prevProps, prevState) {\n        const prevQuery = prevProps.query;\n        const prevPage = prevState.page;\n        const nextQuery = this.props.query;\n        const nextPage = this.state.page;\n\n        if (prevQuery !== nextQuery) {\n            this.setState({ status: 'pending', page: 1 })\n            await picturesApi(nextQuery, prevPage)\n                .then(images => {\n                    if (images.totalHits === 0) {\n                        throw new Error(`Nothing with name ${nextQuery} was not found`);\n                    }\n                    console.log(images);\n                    this.setState((prevState) => ({\n                        images: [...images.hits],\n                        status: 'resolved',\n                        pages: images.totalHits/12,\n                    }));\n                })\n                .catch(error => this.setState({ error, status: 'rejected' }));\n        }\n\n        if (prevPage !== nextPage && nextPage > 1) {\n            this.setState({ status: 'another-pending'})\n            await picturesApi(nextQuery, nextPage)\n                .then(images => {\n                    console.log(images);\n                    this.setState((prevState) => ({ images: [...prevState.images, ...images.hits], status: 'resolved', }));\n                })\n                .catch(error => this.setState({ error, status: 'rejected' }));\n        }\n    }\n\n    autoScroll = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  };\n\n  handleLoadMore = () => {\n      this.setState((prevState) =>{\n          return {page: prevState.page + 1}\n      })\n  };\n\n    render() {\n        const { images, error, status, pages, page} = this.state;\n\n        if (status === 'idle') {\n            return (\n                <h1>Please, enter something</h1>\n            );\n        }\n\n        if (status === 'pending') {\n            return (\n                <Loader\n                    type=\"ThreeDots\"\n                    color=\"#3f51b5\"\n                    height={280}\n                    width={280}\n                />\n            );\n        }\n\n        if (status === 'another-pending') {\n            return (\n                <>\n                    <ul className=\"ImageGallery\">\n                        {images.map(image => (\n                            <ImageGalleryItem\n                                key={image.id}\n                                id={image.id}\n                                // largeImageURL={image.largeImageURL}\n                                webformatURL={image.webformatURL}\n                            />\n                        ))}\n                    </ul>\n                    <Loader\n                        type=\"ThreeDots\"\n                        color=\"#3f51b5\"\n                        height={280}\n                        width={280}\n                    />\n                </>\n            );\n        }\n\n        if (status === 'rejected') {\n            return (\n                <h1>{error.message}</h1>\n            )\n        }\n\n        if (status === 'resolved') {\n            return (\n                <>\n                    <ul className=\"ImageGallery\">\n                        {images.map(image => (\n                            <ImageGalleryItem\n                                key={image.id}\n                                id={image.id}\n                                // largeImageURL={image.largeImageURL}\n                                webformatURL={image.webformatURL}\n                            />\n                        ))}\n                    </ul>\n                    {pages >= page ? <Button onClick={this.handleLoadMore} /> : <></>}\n                </>\n            );\n        }\n    }\n}\n\nImageGallery.propTypes = {\n    images: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default ImageGallery;","import React, {Component} from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\n\nclass App extends Component {\n  static propTypes = {};\n\n  state = {\n    query: '',\n  };\n\n  getQuery = query => {\n    this.setState({ query });\n  }\n\n  render() {\n    return (\n      <div>\n        <Searchbar onSubmit={this.getQuery} />\n        {/* <h1>Please enter something in input</h1> */}\n        <ImageGallery query={this.state.query}/>\n        {/* <h1>{error.message}</h1> */}\n        <ToastContainer />\n      </div>   \n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}